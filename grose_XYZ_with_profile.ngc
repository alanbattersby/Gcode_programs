(	Main Table starting locations )
#<_Main_Count>	= #200	( Number of Rosettes on Main	)
#<_MainSpindle>	= 200	( start of Rosettes on Main Spindle	)
				( data starts at #<_MainSpindle + 1>)

#<_Chuck_Count>	= #600	( Number of stages on Chuck	)
#<_Chuck>	= 600	( start of stages on chuck		)

#<_Rosette_Count>	= #800	( first item is count of rosettes	)
#<_Rosettes>		= 801	( start of rosette data		)
#<_RosettesOffset>	= 10	( record size for Rosette		)

#<_ProfileStart>	= #2000 ( start of lookup range for items in profile	)
#<_ProfileInc>		= #2001 ( increment value for lookup range 	)
#<_ProfileNd>		= #2002 ( end value of lookup range	   	)
#<_ProfileCount>	= #2003 ( number of items in profile		) 
#<_ProfileData>		= 2004  ( data starts at 2004			)

#<_result>	= #31	( General scalar result			)
#<_resultA>	= #32	( this with #31 is polar of radius		)
#<_resultX>	= #33	( X coordinate of vector result 		)
#<_resultY> 	= #34	( Y coordinate of vector result 		)
#<_resultZ> 	= #35	( Z coordinate of vector result 		)
#<_root1>	= #36	( first root of quadratic			)
#<_root2>	= #37 	( second root of quadratic			)
#<_nroots>	= #38	( number of roots of quadratic			)

( Main Program locations						)
#<_UseChuck>		= #50	(flag is 1 if using chuck		)
#<_IsRadialProfile>	= #51	(if 1 use length of vector xy	)
#<_ProfileInZ>		= #52	(flag is 1 if  profile in Z dirn	)
#<_UseProfile>		= #53	(flag is 1 if using profile		)
#<_ToolOffset>		= #54	(tool offset position  not used	)
#<_UseBlending>		= #55	( flag is 1 if using blending	)
#<_InvFeedrate>		= #56	( inverse feed rate		)
#<_Feedrate>		= #57	(Linear feed rate			)
#<_Safeheight>		= #58	(safe height			)

( Use type to call correct function		)
( Fill in dispatch table			)
#40 = 100	(Elliptical Rosette  	Type 0	)
#41 = 150	(Polygon Rosette 	Type 1	)
#42 = 200	(Wave Rosette		Type 2	)
#43 = 250	(Epicycloid Rosette 	Type 3	)
#44 = 300	(Hypocycloid Rosette	Type 4	)
#45 = 350	(Spiral Rosette		Type 5	)
#46 = 400  	(Petal Rosette		Type 6	)
#47 = 450	(Unused Rosette		Type 7	)

(Basic Rosettes that take their values from a memory block	 	)
(Common Offsets						)
(  R_Type        = 0;    // type of rosette				)
(  R_Include     = 1;    // flag to include rosette			)
(  R_R           = 2;    // Major radius of rosette			)
(  R_r           = 3;    // Minor radius of rosette				)
(  R_Phase       = 4;    // phase of rosette				)
(  R_Blend       = 5;    // blend coefficient				)

(  Polygon Rosette						)
(  R_Numsides    = 6;    // number of sides in polygon		)
(  R_IsStar      = 7;    // flag true if star shape				)

(  Petal Rosette 							)
(  R_Numsides	 = 6;	// number of sides of petal			)

(  Wave Rosette							)
(  R_Frequency   = 6;    // frequency of wave			)
(  R_Amplitude   = 7;    // Amplitude of wave			)
(  R_Absolute    = 8;    // flag set true if absolute values used		)

(  Spiral Rosette							)
(  a             = 2;    // start radius					)
(  b             = 3;    // r = a + b * angle				)
(								)
(sub to display rosette data )
o<Display_Rosette> sub (#1 is base address of rosette)
	#2 = ##1
	#3 = #[#1 + 5]
	(debug, rosette base = #1 type = #2 blend = #3)
o<Display_Rosette> endsub
	

(---------- first code to create various types of Rosette ---------------------)
o<CreateEllipticalRosette> sub	(#1 is the Major radius		)
				(#2 is the Minor radius		)
				(#3 is the phase			)
				(#4 is the blending value		)
				(#8 is local base addr of data block	)

	( first get index of next free rosette space in memory		)
	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8		= 0  (Type of rosette 			)
	#[#8 + 1] 	= 1  (Include this rosette 			)
	#[#8 + 2]  	= #1 (Major radius			)
	#[#8 + 3]	= #2 (Minor radius			)
	#[#8 + 4]  	= #3 (Phase of rosette			)
	#[#8 + 5]	= #4 (Blend				)
	
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				
o<CreateEllipticalRosette> endsub

o<CreateWaveRosette> sub	(#1 is the Radius			)
				(#2 is the Frequency		)
				(#3 is the Amplitude		)
				(#4 is the Phase			)
				(#5 is the abs flag		)
				(#6 is the blend flag		)
				(#8 is local base addr of data block	)
	( first get index of next free rosette space in memory		)
	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 2  (Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = 0  (none					)
	#[#8 + 4]  = #4 (Phase of rosette				)
	#[#8 + 5]  = #6 (Blend					)
	#[#8 + 6]  = #2 (frequency					)
	#[#8 + 7]  = #3 ( Amplitude				)
	#[#8 + 8]  = #5 ( Absolute value				)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				
o<CreateWaveRosette> endsub

o<CreatePolyRosette> sub  	(#1 is the Major Radius		)
				(#2 is the Minor radius for star	)
				(#3 is the Number of sides		)
				(#4 is the Phase			)
				(#5 is the star flag		)
				(#6 is the blend flag		)
				(#8 is local base addr of data block	)
	( first get index of next free rosette space in memory		)
	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 1  	(Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = #2 (Minor or star radius			)
	#[#8 + 4]  = #4 (Phase of rosette				)
	#[#8 + 5]  = #6 (Blend					)
	#[#8 + 6]  = #3 (Num sides				)
	#[#8 + 7]  = #5 (is star					)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				
o<CreatePolyRosette> endsub


o<CreatePetalRosette> sub  	(#1 is the Major Radius		)
				(#2 is the Minor radius for star	)
				(#3 is the Number of sides		)
				(#4 is the Phase			)
				(#5 is the blend flag		)
				(#8 is local base addr of data block	)
	( first get index of next free rosette space in memory		)
	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 6  	(Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = #2 (Minor or star radius			)
	#[#8 + 4]  = #4 (Phase of rosette				)
	#[#8 + 5]  = #5 (Blend					)
	#[#8 + 6]  = #3 (Num sides				)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				
o<CreatePetalRosette> endsub

o<CreateEpiRosette> sub	(#1 is the Major Radius			)
			(#2 is the Minor radius for circle		)
			(#3 is the Phase				)
			(#4 is the Blend				)
			(#8 is local base addr of data block		)
	( first get index of next free rosette space in memory		)
	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 3  	(Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = #2 (Minor or star radius			)
	#[#8 + 4]  = #3 (Phase of rosette				)
	#[#8 + 5]  = #4 (Blend					)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				

o<CreateEpiRosette> endsub

o<CreateHypoRosette> sub (#1 is the Major Radius			)
			(#2 is the Minor radius 			)
			(#3 is the Phase				)
			(#4 is the blend flag			)
			(#8 is local base addr of data block		)
	( first get index of next free rosette space in memory		)

	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 4  	(Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = #2 (Minor or star radius			)
	#[#8 + 4]  = #3 (Phase of rosette				)
	#[#8 + 5]  = #4 (Blend					)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				

o<CreateHypoRosette> endsub

o<CreateSpiralRosette> sub 
			(param #1 is a				)
			(param #2 is b				)
			(param #3 is the Phase			)
			(param #4 is the Blend			)

			(local #8 is base addr of data block	)
	( first get index of next free rosette space in memory	)

	#8 = [#<_Rosettes> + [#<_Rosette_Count> * #<_RosettesOffset>]]
	##8 	= 5  	(Type of rosette 				)
	#[#8 + 1]  = 1  (Include this rosette 			)
	#[#8 + 2]  = #1 (Major radius				)
	#[#8 + 3]  = #2 (Minor or star radius			)
	#[#8 + 4]  = #3 (Phase of rosette				)
	#[#8 + 5]  = #4 (Blend					)
	#<_result> = [#8]  ( return addr of this rosette 		)	
	#<_Rosette_Count> = [#<_Rosette_Count> + 1]				

o<CreateSpiralRosette> endsub

o<AddRosetteToSpindle> sub  	(#1 is spindle address		)
				(#2 is rosette address		)
				(#3 is local next free address	)
	#3 = [#1 + 1 + ##1]  ( next free index)
	##3 = [#2]
	##1 = [##1 + 1]
o<AddRosetteToSpindle> endsub

(Interpolate between two values returns interpolated value in #<_result> )
( the first value must be less than the second value)
(parameters #1 = value 1)
(	    #2 = fraction )
(	    #3 = value 2 )
( returns value in global #<_result> )
o<linterp> sub
	#<_result> = [ [#1 * [ 1 - #2 ]] + [#3 * #2 ]] 
o<linterp> endsub

o<linterp2> sub	(param #1 is x1	)
		(param #2 is y1 )
		(param #3 is f	)
		(param #4 is x2 )
		(param #5 is y2 )

	#<_resultX> = [ #1 * [ 1 - #3 ] + [#3 * #4 ]] 
	#<_resultY> = [ #2 * [ 1 - #3 ] + [#3 * #5 ]]
o<linterp2> endsub

(  In all the following subs						)
( #1 first param is the rosette addr of data blockin EMC variables 	)
( #2 is angle to use to calculate the radius				)
( result is returned in global variable <_result>			)

o100 sub  (Elliptical Rosette Type = 0				)
	(param  #1 is address of data block				)
	(param  #2 is the angle of required radius			)
	(local  #3 is the major radius				)
	(local  #4 is the minor radius				)
	(local  #5 is the phase					)
	(local  #6 is the blend					)
	(local  #7 is phase corrected angle				)
	(local  #8 is bcos = Minor_rad * cos #7			)
	(local  #9 is asin = Major_rad * sin #7			)
	(local  #10 is l = sqrt[asin*asin + bcos*bcos]		)
 
	(first get values)
	#3 = #[#1 + 2]
	#4 = #[#1 + 3]
	#5 = #[#1 + 4]
	#6 = #[#1 + 5]

	#7 = [#2 - #5]
	(now calc radius of ellipse)
	o<ifer1> if [#3 EQ #4]
		#<_result> = [#3 * #6]    (always the same so save calc)		
	o<ifer1> else			
		#8 = [#4 * cos [ #7]]
		#9 = [#3 * sin [ #7]]
		#10 = [sqrt [ [#9 * #9] + [#8 * #8 ]]]
		#<_result> = [#6 * #3 * #4  / #10 ]
	o<ifer1> endif
	( also return 2D vector result )
	 #<_resultX> = [#<_result> * cos [#2]]
	 #<_resultY> = [#<_result> * sin [#2]]
o100 endsub

o150 sub	(Poly Rosette Type = 1			)  	
		(param #1 is Poly Rosette  address	)
		(param #2 is angl			)
		(local #3 is Major radius		)
		(local #4 is minor radius		)
		(local #5 is phase			)
		(local #6 is blend			)
		(local #7 is number of sides ns		)
		(local #8 is star flag = 1 if a star	)
	(first get values)
	#3	= #[#1 + 2]	(r1	)
	#4	= #[#1 + 3]	(r2 	)
	#5	= #[#1 + 4]	(phase 	)
	#6 	= #[#1 + 5]	(blend 	)
	#7 	= #[#1 + 6]	(ns	)
	#8 	= #[#1 + 7]	(isstar	)

	#9 = [#2 - #5]  (angle = angl - phase , correct for phase)

	#7 = [[ 1 + #8] * #7] 		(actual number of sides)
	#10 = [ 360 / #7]		(da )
	#11 = [#10 / 2 ]		(da2)
	#12 = [#9 / #10]		(f = angle / da )
	#13 = fix [ #12]		(indx = floor[f])
	#14  = [#9 - #13 * #10]		(fs = angle - indx * da )

	o<ifpr1> if [ #8 EQ 0 ]  (if !Isstar)
		O<ifpr02> if [#14 LT #11 EQ 0]		
		    #14 = [#11 - #14]  (fs = da2 - fs )
		o<ifpr02> else
		    #14 = [#14 - #11]  (fs = fs - da2 )
		   
		o<ifpr02> endif 
		#<_result> = [ #6 * #3 * cos[#11] /  cos [#14] ]
	o<ifpr1> else
		o<ifpr03> if [[#13 mod 2] eq 0] (swap r1 r2 )
		 #15 = [#3]
		 #3  = [#4]
		 #4  = [#15]
		o<ifpr03> endif
		#16 = [#3 - #4 * cos [#10]]  (l = r1 - r2 * cos [da])
		#17 = atan [#4 * sin[#10]] / [#16] (alpha = atan [ r2 * sin[da] / l )
		#<_result> = [#6 * #4 * sin [#10 + #17] / sin[#14 + #17]] (r = r2 * sin[da + alpha] / sin [fs + alpha])
	o<ifpr1> endif
	#<_resultX> = [#<_result> * cos [#2]]
	#<_resultY> = [#<_result> * sin [#2]]
o150 endsub

o200 sub  (Wave Rosette Type = 2 			)
	( #1 is address of data block		)
	( #2 is the angle of required radius		)
	( #3 is the major radius			)
	( #4 is the frequency			)
	( #5 is the amplitude			)
	( #6 is the phase				)
	( #7 is the abs value			)
	( #8 is the blend value			)
	( #9 is amplitude at angle given by #2  	)
	(first get values)
	#3	 = #[#1 + 2]
	#6	 = #[#1 + 4]
	#8	 = #[#1 + 5]
	#4	 = #[#1 + 6]
	#5	 = #[#1 + 7]
	#7	 = #[#1 + 8]
	#9 = [#5 * sin[#4 * [#2 - #6]]]
	o<ifwr1> if [#7 GT 0]
		#9 = abs[#9]
	o<ifwr1>  endif
	#<_result> = [#8 * [ #3 + #9]]
	#<_resultX> = [#<_result> * cos [#2]]
	#<_resultY> = [#<_result> * sin [#2]]
o200 endsub

o250 sub (Epicycloid Rosette Type = 3)
		( param #1 is address of data block		)
		( param #2 is the angle of required radius	)
		( local #3 is the major radius	R	)
		( local #4 is the minor radius	r	)
		( local #5 is the phase			)
		( local #6 is the blend			)
		( local #7 is k + 1				)
		( local #8 is x				)
		( local #9 is y				)
		( local #10 is angle - phase		)
	(first get values)
	#3	 = #[#1 + 2]
	#4	 = #[#1 + 3]
	#5	 = #[#1 + 4]
	#6	 = #[#1 + 5]

	#10 = [#2 - #5]  (correct for phase)

	#7 = [#3 / #4 + 1]
	#8 = [#4 * #7 * cos [#10] - #4 * cos [#7 * #10]]
	#9 = [#4 * #7 * sin [#10] - #4 * sin [#7 * #10]]

	#<_result> = sqrt[[#8 * #8] + [#9 * #9]]
	#<_result> = [#<_result> * #6]
	#<_resultX> = [#8 * #6]
	#<_resultY> = [#9 * #6]
o250 endsub

o300 sub (HypoCycloid Rosette  Type = 4)
		( param #1 is address of data block		)
		( param #2 is the angle of required radius	)
		( local #3 is the major radius		)
		( local #4 is the minor radius		)
		( local #5 is the phase			)
		( local #6 is the blend			)
		( local #7 is k - 1				)
		( local #8 is x				)
		( local #9 is y				)
		( local #10 is angle - phase		)
	( k = R / r )
	( x = r * [k - 1]cos θ + r cos [[k-1] θ] )
	( y = r * [k - 1]sin θ - r sin [[k-1] θ] )
	
	(first get values)
	#3	 = #[#1 + 2]
	#4	 = #[#1 + 3]
	#5	 = #[#1 + 4]
	#6	 = #[#1 + 5]

	#10 = [#2 - #5]  (correct for phase)

	#7 = [#3 / #4 - 1]
	#8 = [#4 * #7 * cos [#10] + #4 * cos [#7 * #10]]
	#9 = [#4 * #7 * sin [#10] - #4 * sin [#7 * #10]]
	#<_result> = sqrt[[#8 * #8] + [#9 * #9]]
	#<_result> = [#<_result> * #6]
	#<_resultX> = [#8 * #6]
	#<_resultY> = [#9 * #6]
o300 endsub

o350 sub (Spiral Rosette Type = 5)
		( param #1 is address of data block		)
		( param #2 is the angle of required radius	)

		( r = a + b * angle			)
		( local #3 is a				)
		( local #4 is b				)
		( local #5 is the phase			)
		( local #6 is the blend			)
	
	#3	= #[#1 + 2]
	#4	= #[#1 + 3]
	#5	= #[#1 + 4]
	#6	= #[#1 + 5]

	#<angl> = [#2 - #5]  (correct for phase)
	#<_result> = [#6 * [ #3 + [ #4 * #2]]]
	#<_resultX> = [#<_result> * cos [#2]]
	#<_resultY> = [#<_result> * sin [#2]]
o350 endsub

o400 sub  (Petal Rosette Type = 6)
		(param #1 is Rosette  address	)
		(param #2 is angl			)
		(local #3 is Major radius		)
		(local #4 is minor radius		)
		(local #5 is phase			)
		(local #6 is blend			)
		(local #7 is number of sides ns	)
	
	(first get values)
	#3	= #[#1 + 2]	(r1	)
	#4	= #[#1 + 3]	(r2 	)
	#5	= #[#1 + 4]	(phase 	)
	#6 	= #[#1 + 5]	(blend 	)
	#7 	= #[#1 + 6]	(ns	)
	(debug in petal blend is #6 ns is #7 r1 is #3 r2 is #4)
	#9 = [#2 - #5]  (angle = angl - phase , correct for phase)

	#7 =  [2 * #7] 			(actual number of sides)
	#10 = [ 360 / #7]		(da )
	#11 = [#10 / 2 ]		(da2)
	#12 = [#9 / #10]		(f = angle / da )
	#13 = fix [ #12]		(indx = floor[f])
	#14  = [#9 - #13 * #10]		(fs = angle - indx * da )

	O<ifpr02> if [[#13 mod 2] EQ 0]		
		    o<linterp> call [#3] [#14 / #10] [#4] 
	o<ifpr02> else
		    o<linterp> call [#3] [1 - #14 / #10] [#4]
	o<ifpr02> endif	
	#<_result> = [ #<_result> * #6]
	(debug petal r = #<_result>)
	#<_resultX> = [#<_result> * cos [#2]]
	#<_resultY> = [#<_result> * sin [#2]]
o400 endsub

o450 sub (Formula Rosette ID = 7 )
	(not implemented yet)
	(debug, not implemented)
	#<_result> = 0
	#<_resultX> = 0
	#<_resultY> = 0
o450 endsub

(sub to calculate the blending total for a spindle			)
o<Blend_total> sub	(#1 is addr of spindle			)
			(#2 is local index rindx			)
			(#3 is local address of rosette 		)
			(#4 is local number of rosettes		)
			(#5 is the running total			)
	#2 = 0
	#5 = 0
	#4 = ##1
	
	o<sowhile> while [#2 LT ##1]
		#3 = #[#1 + 1 + #2]
		#5 = [ #5 + abs[ #[#3 + 5]]]
		#2 = [ #2 + 1]
	o<sowhile> endwhile
	#<_result> = [#5]
o<Blend_total> endsub

( sub to calculate the amount a headstock moves due to the action of a rosette  )
o<Spindle_Offset> sub 	( #1 is the spindle concerned			)
			( #2 is the angle concerned			)
			( #3 is local rindx viz index through spindle		) 
			( #4 is local r = overall radius 			)
			( #5 is local rs = radius of an individual rosette	) 
			( #6 is local calculated address of rosette		)
			( #7 is local rosette type				)
			( #8 is local blend total				)
	#3 = 0
	o<ifso0> if [#<_UseBlending> GT 0] (initialise r )
		#4 = 0
		o<Blend_total> call [#1]
		#8 = [#<_result>]
		o<ifso3> if [ abs[#8] LT 0.0000001 ]  (if no rosettes blend = 0)
			#8 = 1
		o<ifso3> endif 
	o<ifso0> else
		#4 = -200
		#8 = 1
	o<ifso0> endif	

	o<sowhile> while [#3 LT ##1]
		#6 = #[#1 + 1 + #3]
		#7 = ##6
		#9 = [100 + #7 * 50]
		o[100 + 50 * #7] call [#6] [#2]	(call relevant rosette)		
		#5 = [#<_result>]
		
		(what we do now depends upon blend flag)
		o<ifso> if [#<_UseBlending> GT 0 ]	
			#4 = [ #4 + #5]
		o<ifso> else  (not using blending so just max)
			o<ifso1> if [#5 GT #4]
				#4 = [#5]
			o<ifso1> endif
		o<ifso> endif
		#3 = [ #3 + 1]
	o<sowhile> endwhile
	#<_result> = [#4 / #8]
o<Spindle_Offset> endsub

(********************* Geometric Chuck Code ****************************)
( Basic offsets for a Chuck stage record				)
( C_Vin		= 0		Velocity of previous stage		)
( C_Vout	= 1		Velocity of current stage		)
( C_Dirn	= 2		+1 or -1 for rotation direction	)
( C_Rosette	= 3		address of Rosette record		)

( Record Sizes							)
#<_COffset>	= 4	( Size of record for a chuck stage		)
o<Display_Stage> sub ( param #1 is address of stage )
	#2 = ##1 
	#3 = #[#1 + 1]
	#4 = #[#1 + 2]
	#5 = #[#1 + 3]
	(debug, stage vin = #2 vout = #3 dirn = #4 rosette = #5)
o<Display_Stage> endsub

(Subroutine to create a new stage and add to chuck			)
o<Create_Chuck_Stage> sub
			(param #1 is vin				)
			(param #2 is vout				)
			(param #3 is same dirn flag		)
			(param #4 is address of rosette		)
			(local #6 is next free address		)
	#6 = [#<_Chuck> + 1 + #<_Chuck_Count> * #<_COffset>]  ( next free index)
	##6	= [#1]
	#[#6+1] = [#2]
	#[#6+2]	= [#3]
	#[#6+3] = [#4]
	#<_Chuck_Count> = [ #<_Chuck_Count> + 1]
	#<_result> = [#6]

o<Create_Chuck_Stage> endsub

( Subroutines for calculating chuck position				)
o<Stage_out_angle> sub		
			(param #1 is address of stage		)
			(param #2 is angle of prev stage		)
			(local #3 is vin				)
			(local #4 is vout				)
			(local #5 is dirn				)
			
	#3	= ##1
	#4	= #[#1 + 1]
	#5	= #[#1 + 2]
	#<_result> = [[ #3 / #4 ] * #2 * #5]
o<Stage_Out_angle> endsub

o<Polar> sub
		(param #1 is x	)
		(param #2 is y  )

		#3 = [#1 * #1]
		#4 = [#2 * #2]
		
		#<_result> = sqrt[ #3 + #4]
		#<_resultA> = [ atan [#2] / [#1]]
		o<ifp> if [#<_resultA> LT 0]
			#<_resultA> = [ #<_resultA> + 360]
		o<ifp> endif
o<Polar> endsub

( Calculate position of chuck for given angle		)
o<Chuck_Vector> sub	
		(param #1 is angle			)
		(local #3 is index to stages		)
		(local #4 is address of current stage		)
		(local #5 is address of rosette		)
		(local #6 is type of rosette			)
		(local #7 is out angle of stage		)

		(local #8 is total x value			)
		(local #9 is total y value			)
		
	#3 = 0		(indx = 0)
	#8 = 0		(total total x = 0 )
	#9 = 0		(total total y = 0 )
	#7 = [#1] 	(stage angle = initial angle)

 	o<whilecv> while [#3 LT #<_Chuck_Count> ]
		#4 = [ #<_Chuck> + 1 + #3 * #<_COffset>]  (address of stage)
		(o<Display_Stage> call [#4])
		#5 = # [#4 + 3]   (address of rosette )
		#6 = ##5
		o[100 + 50 * #6] call [#5] [#7]	(call relevant rosette)	
		#8 = [#8 + #<_resultX>] ( add xcoord of this stage to total )
		#9 = [#9 + #<_resultY>]
		o<Stage_out_angle> call [#4] [#6]
		#7 = [#<_result>]
		#3 = [#3 + 1]
	o<whilecv> endwhile
	#<_resultX> = [#8]
	#<_resultY> = [#9]
	o<Polar> call [#8] [#9]
o<Chuck_Vector> endsub
(***********************************************************************)
(***** Code to get Height values from a profile ************************	)

o<Height> sub (param #1 is mill x )
		
		 (local  #2 is #1 - profilestart / profileInc )
		 (local  #3 is  FIX [#2])
		 (local  #4 is  profile value at #3)
		 (local  #5  is FUP [#2]  )
		 (local  #6  is profile value at #5)
		 (local  #7 is  fraction #1 - #9 / profileinc)
		 (local  #8  is profile height)
		 (local  #9 is x value at index #3 )
		 (local #10 is dist between points )

		#10 = [#<_ProfileInc> ]
	o<ifzh1> if [#1 lt  #<_ProfileStart>] 
		#<_result> = 0	
	o<ifzh1> elseif  [ #1 gt #<_ProfileNd>]
		#<_result> = 0	
	o<ifzh1> elseif  [ #1 eq #<_ProfileStart>]
		#<_result> = [##<_ProfileData>]
	o<ifzh1> else
		#2 = [[ #1 - #<_ProfileStart> ] / #<_ProfileInc>]
		#3 = FIX [#2]
		#9 = [#<_ProfileStart> + [#3 * #<_ProfileInc>]]
		#4 = [#<_ProfileData> + #3]
		#5 = FUP [#2]
		#6 = [#<_ProfileData> + #5]
		#7 = [[#1 - #9] / #10]
		o<linterp> call [##4] [#7] [##6]
		#8 = [#<_result> + ##4]
		#<_result> = [#8]
	o<ifzh1> endif
o<Height> endsub

( Create a ramp profile for testing )
o<Linear> sub  (param #1 is range start 	)
	        (param #2 is range inc  	)	
	        (param #3 is range end		)

		(param #4 is start height	)
		(param #5 is end height		)

		( local #6 = #3 / #5	) 
		( local #7 count	)
		( local #8 is fraction of range	)
		( local #9 is prof data address	)
		( local #10 is height		)

		#<_ProfileStart> = [#1]
		#<_ProfileInc>	 = [#2]
		#<_ProfileNd>	 = [#3]
		#6 = FIX[[#3 - #1] / #2]
		#<_ProfileCount> = [#6 + 1]
		#7 = [0]

		o<lz1> while [#7 le #6]
			#9 = [#<_ProfileData> + #7]
			o<linterp> call [#4] [#7 / #6] [#5]
			#10 = [#<_result>]
			##9 = [#10]
			#7 = [#7 + 1]
		o<lz1> endwhile
o<Linear> endsub

( This generates a profile for a circular cap		)
( Defined by a chord width and a height value		)
( Cap is centred on Zero so range is +- the cap radius	)
( The range for convex gives the length of the chord 	)
o<Cap> sub  
	(param #1 is range start 	)
	(param #2 is range inc  	)	
	(param #3 is range end		)
	(param #4 is cap height	h	)
	(param #5 is vertical offset	)
	
	( local #6 is chord length c	)
	( local #7 is radius R		) 
	( local #8 is b = 2 * [R - h]	)

	( local #9 num items in profile	)
	( local #10 count		)
	( local #11 is prof data address)

	( local #12 is x		)
	( local #13 is radius c		)
	( c = x * x + h * h - 2 * R * h	)

	( local #14 is height at x      ) 

	#<_ProfileStart> = [#1]
	#<_ProfileInc>	 = [#2]
	#<_ProfileNd>	 = [#3]
	(first calculate R = [h*h + c*c] / 2 * h )
	#6 = [[#3 - #1] / 2] ( c is midrange value)
	#7 = [[#4 * #4 + #6 * #6] / [2 * #4]]
	#8 = [ 2 * [#7 - #4]] ( b = 2 * [R - h] )

	#9 = FIX[[#3 - #1] / #2]
	#<_ProfileCount> = [#9 + 1]
	(initialise count)
	#10 = [0]
	o<lz1> while [#10 le #9]
		#11 = [#<_ProfileData> + #10]
		#12 = [#1 + [#10 * #2]]
		#13 = [#12 * #12 + #4 * #4 - 2 * #7 * #4]
		o<Qsolve> call [1] [#8] [#13]  (should be positive root)
		o123 if [ #<_nroots> gt 0]
			#14 = [#<_root1> ]
		o123 else
			#14 = [0]
		o123 endif
		##11 = [#14 + #5] (height + offset)
		#10 = [#10 + 1]
	o<lz1> endwhile
	
o<Cap> endsub

( This generates a profile for a circular cap		)
( Defined by a chord width and a height value		)
( Cap is centred on Zero so range is +- the cap radius	)
( The range for convex gives the length of the chord 	)
o<Cup> sub  
	(param #1 is range start 	)
	(param #2 is range inc  	)	
	(param #3 is range end		)
	(param #4 is cap height	h	)
	(param #5 is vertical offset	)
	
	( local #6 is chord length c	)
	( local #7 is radius R		) 
	( local #8 is b = 2 * [R - h]	)

	( local #9 num items in profile	)
	( local #10 count		)
	( local #11 is prof data address)

	( local #12 is x		)
	( local #13 is radius c		)
	( c = x * x + h * h - 2 * R * h	)

	( local #14 is height at x      ) 

	#<_ProfileStart> = [#1]
	#<_ProfileInc>	 = [#2]
	#<_ProfileNd>	 = [#3]
	(first calculate R = [h*h + c*c] / 2 * h )
	#6 = [[#3 - #1] / 2] ( c is midrange value)
	#7 = [[#4 * #4 + #6 * #6] / [2 * #4]]
	#8 = [ 2 * [#7 - #4]] ( b = 2 * [R - h] )

	#9 = FIX[[#3 - #1] / #2]
	#<_ProfileCount> = [#9 + 1]
	(initialise count)
	#10 = [0]
	o<lz2> while [#10 le #9]
		#11 = [#<_ProfileData> + #10]
		#12 = [#1 + [#10 * #2]]
		#13 = [#12 * #12 + #4 * #4 - 2 * #7 * #4]
		o<Qsolve> call [1] [#8] [#13]  (should be positive root)
		o222 if [ #<_nroots> gt 0]
			#14 = [#<_root1> ]
		o222 else
			#14 = [0]
		o222 endif
		##11 = [#4 - #14 + #5] (height + offset)
		#10 = [#10 + 1]
	o<lz2> endwhile
	
o<Cup> endsub


(Solve quadratic equation ax2 + bx +c = 0	)
( number of roots returned in #<_nroots>	)
( values returned in #<_root1> and #<_root2>	)
o<Qsolve> sub	(param #1 is a		)
		(param #2 is b		)
		(param #3 is c		)

		(local #4 is d		)

	#4 = [#2 * #2 - 4 * #1 * #3 ]
	o<ifq> if [#4 lt 0]
		#<_nroots> = [0]
	o<ifq> else if [#4 eq 0]
		#<_nroots> = [1]
		#<_root1> = [[-#2 + sqrt [ #4] ] / [2 * #1]]
	o<ifq> else
		#<_nroots> = [2]
		#<_root1> = [[-#2 + sqrt [ #4] ] / [2 * #1]]
		#<_root2> = [[-#2 - sqrt [ #4] ] / [2 * #1]]
	o<ifq> endif
o<Qsolve> endsub

(******Next Section is movement so change to suit your axis layout *****	)
( In my setup the 4 axes of my machine are 					)
(	cnc X = rose x rosette movement					)
(	cnc Y = rose z pumping movement					)
(	cnc Z = rose v  for depth of cut					)

o<MoveTo> sub	(param #1 is mill x 			)	
		(param #2 is mill y			)
		(param #3 is mill z 			)
		(param #4 is F which is the feedrate	)
		
		g1 x[#1] y[#2] z[#3] f[#4]
			
o<MoveTo> endsub

o<GoTo> sub	(param #1 is mill x			)	
		(param #2 is mill y			)
		(param #3 is mill z			)
		(param #4 is F which is the feedrate	)
		g0 x[#1] y[#2] z[#3] f[#4] 
o<GoTo> endsub

o<MoveToSafeHeight> sub
	g0 Z [#<_Safeheight>]
o<MoveToSafeHeight> endsub

o<MoveToDepth> sub 	(#1 is depth )
			(#2 is feedrate )
	g0 Z 0
	g1 Z [#1] f[#2]
o<MoveToDepth> endsub

(******* End of user configurable section ******************************)

(***********************************************************************)
( Model of rose engine assumes the following physical configuration	)
(	X is standard mill x axis 					)
(	Y is standard mill y axis					)
(	Z is cutting depth						)
(									)
( You can map these onto a different set of axes 			)
( By changing the gcode in the section above				)
(***********************************************************************)
  
o<Generate_Path> sub  	(param #1 is start angle		)
			(param #2 in angle increment		)
			(param #3 is end angle			)
			(param #4 is the depth to cut at	)
			(param #5 is feedrate			)		
			(param #6 is phase of main spindle	)

			(local #9 is  profile lookup value	)
			(local #10 is local angle		)
			(local #11 is x	mill table  movement	)
			(local #12 is y	mill table movement	)
			(local #13 is z mill table movement	)


	#10 = [#1]
	#11 = 0		
	#12 = 0	
	#13 = [#4]	
	(LOG, Generating path)
	o<GenWhile> while [ #10 LE #3 ]
		o<Spindle_Offset> call [#<_MainSpindle>] [#10 + #7]
		#11 = [#<_resultX>]
		#12 = [#<_resultY>]
		o<ifmain0> if [#<_UseChuck>]
			o<Chuck_Vector> call [#<_Chuck>] [#10 + #7]
			( now do something with result )
			#11 = [#11 + #<_resultX>]
			#12 = [#12 + #<_resultY>]
			
		o<ifmain0> endif
		o<ifmain1> if [#<_UseProfile>]
			o<ifm1> if [#<_IsRadialProfile> ]
				#9 = sqrt [ #11 * #11 + #12 * #12]
			o<ifm1> else
				#9 = #11
			o<ifm1> endif
			o<Height> call [#9]
			o<ifm2> if  [#<_ProfileInZ>]
				#13 = [#4 + #<_resultZ> + #<_result>]
			o<ifm2>  else ( add profile to x )
				#13 = [#4 + #<_resultZ>]
				#11 = [#11 + #<_result>]
			o<ifm2> endif
		o<ifmain1> endif
		( now generate call to move along path )
		o<ifmain2> if [#10 EQ #1] (move at safe height to point)
			o<MoveToSafeHeight> call
			o<GoTo> call [#11] [#12] [#<_Safeheight>]  [#5] (x,y,z,f)
			o<MoveToDepth> call [#13] [#5]
		o<ifmain2> else
			o<MoveTo> call [#11] [#12] [#13] [#5] (x,y,z,f)
		o<ifmain2> endif
		#10 = [#10 + #2]
	o<GenWhile> endwhile
	o<MoveToSafeHeight> call
o<Generate_Path> endsub

(---------------------- Start of main program ------------------)
#<_UseChuck>		= 0	(not using a chuck		)
#<_UseBlending>		= 0	(blending rosettes		)
#<_Safeheight>		= 2	(Safe height			)
#<_Feedrate>		= 60	(Feed rate			)
#<_IsRadialProfile>	= 1	(Using a radial profile 	)
#<_ProfileInZ>		= 1	(profile in Z direction		)
#<_UseProfile>		= 1	(Definately using a profile 	)

#<_xstart>	= 0
#<_xinc>	= 50
#<_xend>	= 100

(****** end configuration section  ***** )

( change the next line to initialise the profile 				)
( If you are not using a profile comment out the next uncommented gcode line	) 
( the example below uses a subroutine to generate a linear profile		)
			
( the first three parameters of the built in profile generators are the same 	)
( being the #1 = start, #3 = increment and #3 = end values of the base range	)
( for Linear #4 = left end height #5= right end height 				)
( for Cap #4 = cap height #5 = optional offset					)
( for Cup #4 = cup depth  #5 = optional offset					)

o<Linear> call  [0] [55] [55] [0] [-20] 
(o<Cap> call [-50] [1] [50] [10] [-10] 
(o<Cup> call [-50] [0.5] [50] [10] [0] 

( if you use a probe to get the profile height results use the following	)
( code to call the sub generated to create the profile				)
( My probe program creates a file called profile.ngc so				)
( Example									)
(   o<profile> call								)

( now must add at least one rosette to the spindle )
##<_MainSpindle> = 0	( spindle is empty	)
##<_Chuck>	 = 0	(chuck is empty		)

(For a wave				)
(#1 is the Radius			)
(#2 is the Frequency			)
(#3 is the Amplitude			)
(#4 is the Phase	default value 0	)
(#5 is the abs flag	default value 0	)
(#6 is the blend flag	default value 1	)

o<CreateWaveRosette> call [0] [6] [50] [0] [0] [1]
o<AddRosetteToSpindle> call [#<_MainSpindle>] [#<_result>]
g61
o<Generate_Path> call [0] [0.25] [360] [-2] [#<_Feedrate>] [0]
g0 x0 y0 z[#<_Safeheight>]

M2