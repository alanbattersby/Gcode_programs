(-----------------------------------------------------------------------)
(  Wheels - a program to simulate a simple geometric chuck		)
(  Created By:  Alan Battersby	August 2013				)
(									)
(  This program is free software: you can redistribute it and/or modify )
(  it under the terms of the GNU General Public License as published by )
(  the Free Software Foundation, either version 3 of the License, or	)
(  [at your option] any later version.					)
(									)
(    This program is distributed in the hope that it will be useful,	)
(    but WITHOUT ANY WARRANTY; without even the implied warranty of	)
(    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the	)
(    GNU General Public License for more details.			)
(	see <http://www.gnu.org/licenses/>				)
(									)
(-----------------------------------------------------------------------)

(	Main Table starting locations 			)

#<_Count>	= #200	( Number of wheels		)
#<_Base>	= 201	( start of list of wheels	)

#<_ProfileStart>= #2000 ( start of lookup range for items in profile	)
#<_ProfileInc>	= #2001 ( increment value for lookup range 	)
#<_ProfileNd>	= #2002 ( end value of lookup range	   	)
#<_ProfileCount>= #2003 ( number of items in profile		) 
#<_PreValue>	= #2004 ( height to return if lookup less than profile start )
#<_PostValue>	= #2005 ( height to return if lookup greater than profile end)

#<_ProfileData>	= 2010  ( data starts at 2010			)

#<_result>	= #31	( General scalar result		)
#<_resultR>	= #31	( Radius in polar result	)
#<_resultA>	= #32	( Angle in polar result		)

#<_resultN>	= #31	( Numerator of fraction		)
#<_resultD>	= #32	( Denominator of fraction	)

#<_resultX>	= #31	( X coordinate of vector result )
#<_resultY> 	= #32	( Y coordinate of vector result )
#<_resultZ> 	= #33	( Z coordinate of vector result )

#<_root1>	= #31	( first root of quadratic	)
#<_root2>	= #32 	( second root of quadratic	)
#<_nroots>	= #33	( number of roots of quadratic	)

( Main Program locations						)
#<_UseRotary>		= #40	(flag is 1 if a rotary machine		)
#<_UseProfile>		= #41	(flag is 1 if using a profile		)
#<_Use_Z_for_Depth>	= #42   (flag is 1 if z is both depth and profile)
#<_Use_Rad_Phase>	= #43	(flag set 1 if using radius / phase values)
#<_InvFeedrate>		= #44	( inverse feed rate			)
#<_Feedrate>		= #45	(Linear feed rate			)
#<_Safeheight>		= #46	(safe height				)
#<_Winding> 		= #47	( number of turns around origin		)

#<_XScale>		= #50	( scaling factor for x direction	)
#<_YScale>		= #51	( scaling factor for y direction	)
#<_ZScale>		= #52	( scaling factor for z direction	)

#<_ProfileHeightAxis>	= #53	( 0 if X, 1 if Y, 2 if Z		)
#<_ProfileBaseAxis>	= #54   ( 0 if X, 1 if Y, 2 if Z, 3 if radial	)

(********************* Library Code ********************)
(Interpolate between two values returns interpolated value in #<_result> )
( the first value must be less than the second value)
(parameters #1 = value 1)
(	    #2 = fraction )
(	    #3 = value 2 )
( returns value in global #<_result> )
o<linterp> sub
	#<_result> = [ [#1 * [ 1 - #2 ]] + [#3 * #2 ]] 
o<linterp> endsub


(***** Code to get Height values from a profile ************************)
( returns values in  _result						)

o<Height> sub (param #1 is profile position value )
	(local  #2 is #1 - profilestart / profileInc )
	(local  #3 is  FIX [#2])
	(local  #4 is  profile value at #3)
	(local  #5  is FUP [#2]  )
	(local  #6  is profile value at #5)
	(local  #7 is  fraction #1 - #9 / profileinc)
	(local  #8  is profile height)
	(local  #9 is x value at index #3 )

	o<ifzh1> if [#1 lt  #<_ProfileStart>] 
		#8 = #<_PreValue>	
	o<ifzh1> elseif  [ #1 gt #<_ProfileNd>]
		#8 = #<_PostValue>	
	o<ifzh1> elseif  [ #1 eq #<_ProfileStart>]
		#8 = [##<_ProfileData>]
	o<ifzh1> else
		#2 = [[ #1 - #<_ProfileStart> ] / #<_ProfileInc>]
		#3 = FIX [#2]
		#9 = [#<_ProfileStart> + [#3 * #<_ProfileInc>]]
		#4 = [#<_ProfileData> + #3]
		#5 = FUP [#2]
		#6 = [#<_ProfileData> + #5]
		#7 = [[#1 - #9] / #<_ProfileInc>]
		o<linterp> call [##4] [#7] [##6]
		#8 = [#<_result> ] 
	o<ifzh1> endif
	#<_result> = [#8]
o<Height> endsub


( Create a ramp profile for testing )
o<Linear> sub  (param #1 is range start )
       (param #2 is range inc  	)	
       (param #3 is range end	)

	(param #4 is start height)
	(param #5 is end height	 )
	
	( local #6 = #3 / #5	) 
	( local #7 count	)
	( local #8 is fraction of range	)
	( local #9 is prof data address	)
	( local #10 is height		)

	#<_ProfileStart> = [#1]
	#<_ProfileInc>	 = [#2]
	#<_ProfileNd>	 = [#3]
	#6 = FIX[[#3 - #1] / #2]
	#<_ProfileCount> = [#6 + 1]
	#7 = [0]

	o<lz1> while [#7 le #6]
		#9 = [#<_ProfileData> + #7]
		o<linterp> call [#4] [#7 / #6] [#5]
		#10 = [#<_result>]
		##9 = [#10]
		#7 = [#7 + 1]
	o<lz1> endwhile
o<Linear> endsub

( This generates a profile for a circular cap		)
( Defined by a chord width and a height value		)
( Cap is centred on Zero so range is +- the cap radius	)
( The range for convex gives the length of the chord 	)
( R = 0.5*[ c²/[4*h] +h ] note: requires c> 2h		)
( y = h + SQRT[R² - x²] - R				)
( y = h - x²/[ R + SQRT[[R-x]*[R+x]]]			)
o<Cap> sub  
	(param #1 is chord length c 	)
	(param #2 is cap height h 	)	
	(param #3 is vertical offset	)
	(param #4 is x increment	)
	(param #5 is offset		)

	(local #6 is R			)
	(local #7 is x			)
	(local #8 is prof data address	)
	(local #9 is height at x      	) 
	(local #10 is c / 2		)
	(local #11 is neg h flag	)

	#10 = [ 0.5 * #1 ]
	#11 = [1]
	o<lz2> if [ #2 le 0 ]
		#11 = [-1]
	o<lz2> endif
	#<_ProfileStart> = [-1 * #10]
	#<_ProfileInc>	 = [#4]
	#<_ProfileNd>	 = [#10]
	#2 = [ abs[#2]]
	#6 = [ 0.5 * [#2 + [#1 * #1] / [4 * #2]]]

	#<_ProfileCount> = 0
	(initialise x)
	#7 = [#<_ProfileStart>]
	o<lz1> while [#7 le #10]
		(calculate the height )
		#9 = [ #2 + sqrt [#6 * #6 - #7 * #7] - #6]
		#8 = [#<_ProfileData> + #<_ProfileCount>]
		##8 = [#9 * #11 + #5] (height + offset)
		#7 = [#7 + #4]
		#<_ProfileCount> = [#<_ProfileCount> + 1]
	o<lz1> endwhile	
o<Cap> endsub
(********************* Wheels Code *********************)
( Basic offsets for a Chuck stage record		)
#<_ar>		= 1	( real component of amplitude	)
#<_ai>		= 2	( imaj component of amplitude	)
#<_freq>	= 3	( speed of wheel		)
#<_Offset>	= 3	( Size of record for a Wheel	)

(Subroutine to create a new stage and add to chuck)
o<Create_Wheel> sub
	(param #1 is areal			)
	(param #2 is aimaj			)
	(param #3 is freq			)
	(local #4 is next free address		)

	#4 = [#<_Base> + #<_Count> * #<_Offset>]  ( next free index)
	#[#4 + #<_ar>]	= [#1]
	#[#4 + #<_ai>]	= [#2]
	#[#4 + #<_freq>]	= [#3]
	#<_Count> = [ #<_Count> + 1]
	#<_result> = [#4]
o<Create_Wheel> endsub

o<Display_Wheel> sub 
	( param #1 is index of wheel 	)
	( local #2 is real amplitude	)
	( local #3 is imaj amplitude	)
	( local #4 is frequency		)
	( local #5 is address		)
	o<ds1> if [#1 LE #<_Count>]
		#5 = [#<_Base> + #1 * #<_Offset>] 
		#2 = #[#5 + #<_ar>] 
		#3 = #[#5 + #<_ai>]
		#4 = #[#5 + #<_freq>]
		(debug address is #6)
		(debug wheel #1 <#2 + #3i> exp <i * #4 > )
	o<ds1> else
		(debug stage gtr than count)
	o<ds1> endif
o<Display_Wheel> endsub


o<getfreq> sub  (param #1 is indx)
	#2 =  [ #<_Base> + #1 * #<_Offset>]  (address of stage)
	#<_result> = #[#2 + #<_freq>]
o<getfreq> endsub

o<getr> sub  (param #1 is indx)
	#2 =  [ #<_Base> + #1 * #<_Offset>]  (address of stage)
	#<_result> = #[#2 + #<_ar>]
o<getr> endsub

o<geti> sub  (param #1 is indx)
	#2 =  [ #<_Base> + #1 * #<_Offset>]  (address of stage)
	#<_result> = #[#2 + #<_ai>]
o<geti> endsub

o<NTurns> sub
	
	o<if1> if [#<_Count> GT 1]
		(find lcm of period of all stages )
		o<getfreq> call [0]
		o<mkfraction> call [#<_result>] [0.00001]
		#<p1> = [#<_resultD>]

		#<indx> = [1]
		o<w1> while [#<indx> LT #<_Count>]
			o<getfreq> call [#<indx>]
			o<mkfraction> call [#<_result>] [0.00001]
			#<p2> = #<_resultD>
			o<lcm> call [#<p1>] [#<p2>]
			#<p1> = [#<_result>]

			#<indx> = [#<indx> + 1]
		o<w1> endwhile
		#<_result> = [#<p1>]
	o<if1> else
		#<_result> = [1]
	o<if1> endif
o<NTurns> endsub

o<lcm> sub
	( param #1 is a )
	( param #2 is b )
	( local #3 is gcd)
	o<GCD> call [#1] [#2]
	#3 = [#<_result>]
	#<_result> = [abs [ #1 * #2] / #3]
o<lcm> endsub

o<mkfraction> sub
	( param #1 is value to convert 	)
	( param #2 is error		)
	
	#<n> = fix[#1]
	#<x> = [#1 - #<n>]
	o<mf1> if [ #<x> LT #2]  (x < error)
		#<_resultN> = [#<n>]
		#<_resultD> = [1]
	o<mf1> elseif [[1 - #2] LT #<x>] (1 - error < x)
		#<_resultN> = [#<n> + 1]
		#<_resultD> = [1]
	o<mf1> else
		#<lower_n> = 0
		#<lower_d> = 1
		#<upper_n> = 1
		#<upper_d> = 1
		o<mf2> while [1]
			#<middle_n> = [ #<lower_n> + #<upper_n> ]
			#<middle_d> = [ #<lower_d> + #<upper_d> ]
			o<mf2> if [ [#<middle_d> * [#<x> + #2]] LT #<middle_n> ]
				#<upper_n> = [#<middle_n>]
				#<upper_d> = [#<middle_d>]
			o<mf2> elseif [#<middle_n> LT [[#<x> - #2] * #<middle_d>]]]
				#<lower_n> = [#<middle_n>]
				#<lower_d> = [#<middle_d>]
			o<mf2> else
				#<_resultN> = [ #<n> * #<middle_d> + #<middle_n>]
				#<_resultD  = [#<middle_d>]
				return
			o<mf2> endif 
		o<mf2> endwhile
	o<mf1> endif
o<mkfraction> endsub




o<Quadrant> sub 
		(param #1 is x )
		(param #2 is y )
	
	#<_result> = 0
	o<ifq1> if [[#1 LT 0] AND [#2 GE 0]]
		#<_result> = 1
	o<ifq1> elseif [[#1 LT 0] AND [#2 LT 0]]
		#<_result> = 2
	o<ifq1> elseif [[#1 GE 0] AND [#2 LT 0]]
		#<_result> = 3
	o<ifq1> else
		#<_result> = 0
	o<ifq1> endif
o<Quadrant> endsub

o<Polar> sub
	(param #1 is x	)
	(param #2 is y  )

	#3 = [#1 * #1]	
	#4 = [#2 * #2]
	#<_resultA> = [ atan [#2] / [#1]]	
	o<ifp> if [#<_resultA> LT 0]
		#<_resultA> = [#<_resultA> + 360]
	o<ifp> endif				
	
	o<ifp2> if [abs[#<_Winding>] GT 0]
		#<_resultA> = [#<_resultA> + #<_Winding> * 360]
	o<ifp2> endif	
	
	#<_resultR> = sqrt[ #3 + #4]
o<Polar> endsub

( Calculate position of chuck for given angle		)
o<Wheel_Vector> sub	
	(param #1 is angle				)

	(local #3 is index to wheel			)
	(local #4 is address of current wheel		)
	(local #5 is real amplitude of current wheel	)
	(local #6 is imaj amplitude of current wheel	)
	(local #7 is frequency of current wheel		)

	(local #8 is x of wheel at current angle)
	(local #9 is y of wheel at current angle)
		
	(local #10 is total x value		)
	(local #11 is total y value		)

	(local #12 is cos			)
	(local #13 is sin			)
 	#3 = 0	(indx = 0	)
	#5 = 0	(ar = 0	)		
	#6 = 0	(ai = 0	)
	#7 = 0  ( freq = 0 )

	#8 = 0	(x of wheel = 0	)
	#9 = 0	(y of wheel = 0 )
	#10 = 0 (total x = 0 	)
	#11 = 0	(total y = 0	)
	
	(debug Count = #<_Count> angle = #1) 
 	o<whilecv> while [#3 LT #<_Count> ]
		
		#4 =  [ #<_Base> + #3 * #<_Offset>]  (address of stage)
		#5 =  #[#4 + #<_ar>] (real amplitude or radius of wheel )
		#6 =  #[#4 + #<_ai>] (imaj amplitude or phase of wheel)
		#7 =  #[#4 + #<_freq>] (freq of wheel )
		o<wv1> if [#<_Use_Rad_Phase> GT 0]
			#12 = [ cos [#7 * #1 + #6]]
			#13 = [ sin [#7 * #1 + #6]]
			#8 = [#5 * #12]
			#9 = [#5 * #13]
		o<wv1> else
			#12 = [cos [#7 * #1]]
			#13 = [sin [#7 * #1]]
			#8 = [#5 * #12 - #6 * #13]
			#9 = [#5 * #13 + #6 * #12]
		o<wv1> endif
		#10 = [#10 + #8] ( add xcoord of this stage to total )
		#11 = [#11 + #9]
		
		#3 = [#3 + 1]
	o<whilecv> endwhile		
	
	#<_resultX> = [#10]
	#<_resultY> = [#11]
	(debug final posn = #10 #11 )	
o<Wheel_Vector> endsub

(*******************************************************)
( Next Section is movement so change to suit your layout)
( In my setup the axes of my machine are 		)
(	cnc x = chuck x movement			)
(	cnc y = chuck y pumping movement		)
(	cnc z = surface profile				)
(	cnc w = depth of cut				)
(	cnc c = rotation of spindle			)
(*******************************************************)

o<MoveTo> sub	
	(param #1 is x	)	
	(param #2 is y	)
	(param #3 is z 	)
	(param #4 is w	)
	(param #5 is F which is the feedrate		)
	(local #6 is polar Radius if using rotary table	)
	(local #7 is polar Angle  if using rotary table	) 
	(local #8 is combined z + w 			)

	#8 = [#3 + #4]
	o<ifmt0> if [#<_UseRotary> GT 0]
		o<Polar> call [#1] [#2]
		#6 = [#<_resultR>]
		#7 = [#<_resultA>] 
		o<ifmt1> if [#<_Use_Z_for_Depth> GT 0]
			g1 x[#6] c[#7] z[#8]  f[#5] 
		o<ifmt1> else
			g1 x[#6] c[#7] z[#3] w[#4] f[#5]
		o<ifmt1> endif		
	o<ifmt0> else
		o<ifmt2> if [#<_Use_Z_for_Depth> GT 0]
			g1 x[#1] y[#2] z[#8] f[#5]
		o<ifmt2> else
			g1 x[#1] y[#2] z[#3] w[#4] f[#5]
		o<ifmt2> endif			
	o<ifmt0> endif		
o<MoveTo> endsub

o<GoTo> sub	(param #1 is x	)	
		(param #2 is y	)
		(param #3 is z	)
		(param #4 is w 	)
		(param #5 is F which is the feedrate)

		(local #6 is polar Radius if using rotary table	)
		(local #7 is polar Angle  if using rotary table	) 
		(local #8 is depth if axes combined)
	#8 = [#3 + #4]
	o<ifgt0> if [#<_UseRotary> GT 0]
		o<Polar> call [#1] [#2]
		#6 = [#<_resultR>]
		#7 = [#<_resultA>] 	
		o<ifgt2> if [#<_Use_Z_for_Depth> GT 0]
			g0 x[#6] c[#7] z[#8]  f[#5] 
		o<ifgt2> else
			g0 x[#6] c[#7] z[#3]  w[#4] f[#5] 
		o<ifgt2> endif		
	o<ifgt0> else
		o<ifgt3> if [#<_Use_Z_for_Depth> GT 0]
			g0 x[#1] y[#2] z[#8]  f[#5] 
		o<ifgt3> else
			g0 x[#1] y[#2] z[#3]  w[#4] f[#5] 
		o<ifgt3> endif		
	o<ifgt0> endif
o<GoTo> endsub

o<MoveToSafeHeight> sub (param #1 is height )
	o<ifmts> if [#<_Use_Z_for_Depth> GT 0]
		g0 z [#1]
	o<ifmts> else (using xy plane Z for surface)
		g0 w [#1]
	o<ifmts> endif
o<MoveToSafeHeight> endsub

o<MoveToDepth> sub 	(#1 is depth )
			(#2 is feedrate )
	o<ifmtd> if [#<_Use_Z_for_Depth> GT 0]
		g1 z [#1] f[#2]
	o<ifmtd> else
		g1 w [#1] f[#2]
	o<ifmtd> endif
o<MoveToDepth> endsub

(******* End of user configurable section **************************************)
(function gcd[a, b]	)
(    while b ? 0	)
(       t := b		)
(       b := a mod b	)
(       a := t		)
(    return a		)

o<GCD> sub
	( param #1 is a )
	( param #2 is b )
	( local #3 is t	)
	#<_result> = 1
	o<whilegcd> while [ #2 NE 0]
		#3 = [#2]
		#2 = [ #1 mod #2]
		#1 = #3
	o<whilegcd> endwhile
	#<_result> = [#1]
o<GCD> endsub

(***********************************************************************)
( Model of machine assumes the following physical configuration		)
(	X is lateral axis for headstock lateral movement		)
(	Y is vertical axis for headstock movement			)
(	Z is axis along spindle for pumping movement			)
(	C is rotation of spindle axis					)
(	B is axis of rotation of cutter					)
(	U is axis to use for tool movement towards spindle i.e YZ plane	)
(	W is axis to use for tool movement towards face i.e XY plane	)
(									)
( You can map these onto a different set of CNC axes 			)
(***********************************************************************)
  
o<Generate_Path> sub  	(param #1 is start angle			)
			(param #2 in angle increment			)
			(param #3 is end angle				)
			(param #4 is feedrate				)
			(param #5 is depth of cut			)
			(param #6 is phase				)
		
			(local #10 is local angle			)
			(local #11 is x	headstock lateral  movement	)
			(local #12 is y	headstock vertical movement     )
			(local #13 is z headstock movement		)
			(local #14 is Quadrant of last point		) 
			(local #15 is Quadrant of current point		)
			(local #16 is corrected angle			)
			(local #17 is profile height			)
			(local #18 is profile base value		)
			(local #19 is w axis movement			)
			(local #20 is safeheight * zscale		)
	#10 = [#1]

	#14 = [-1]		( this means no value 	)
	#15 = [-1]
	#19 = [ #5 * #<_ZScale>]
	#20 = [ #<_Safeheight> * #<_ZScale> ]

	#<_Winding> = 0	( zero times around origin)
	o<GenWhile> while [ #10 LE #3 ]	
		o<Wheel_Vector> call [#10 + #6]
		
		#11 = [#<_resultX> * #<_XScale>]
		#12 = [#<_resultY> * #<_YScale>]
		#13 = 0
		( first calc profile height )
		( calc profile height if needed )
		o<ifup0> if [#<_UseProfile> GT 0]
			o<ifup1> if [#<_UseRotary> GT 0] 
				#18 = sqrt [ #11 * #11 + #12 * #12]
			o<ifup1> elseif [#<_ProfileBaseAxis> EQ 0]
				#18 = [#11]
			o<ifup1> elseif [#<_ProfileBaseAxis> EQ 1]
				#18 = [#12]
			o<ifup1> elseif [#<_ProfileBaseAxis> EQ 2]
				#18 = [#13]
			o<ifup1> else
				#18 = sqrt [ #11 * #11 + #12 * #12]
			o<ifup1> endif
			o<Height> call [#18]
			o<ifup2> if [#<_ProfileHeightAxis> EQ 0]
				#11 = [#11 + #<_result> * #<_XScale> ]
			o<ifup2> elseif [#<_ProfileHeightAxis> EQ 1]
				#12 = [#12 + #<_result> * #<_YScale> ]
			o<ifup2> else
				#13 = [#13 + #<_result> * #<_ZScale> ]
			o<ifup2> endif
		o<ifup0> endif
		( check if done a full rotation )
		o<Quadrant> call [#11] [#12]	
		#15 = [#<_result>]  ( Current quadrant )
		o<ifm> if [#10 EQ #1]
			#14 = [#15] ( last quadrant same )
		o<ifm> endif
		o<ifm1> if [[#14 EQ 3] AND [#15 EQ 0]] (completed rotation)
			#<_Winding> = [#<_Winding> + 1]
		o<ifm1> elseif [[#14 EQ 0] AND  [#15 EQ 3] ] 
			#<_Winding> = [#<_Winding> - 1]
		o<ifm1> endif
		#14 = [#15]  (remember current quadrant )
		( now generate call to move along path 	)
		( first establish angle			)
		
		o<ifmain2> if [#10 EQ #1] (move at safe height to point)
			o<MoveToSafeHeight> call [#20]
			o<GoTo> call [#11] [#12] [#13] [#20] [#4]
					(params x,y,z,w,f)
			o<MoveToDepth> call [#19] [#4]
		o<ifmain2> else
			o<MoveTo> call [#11] [#12] [#13] [#19] [#4] 
					(x,y,z,w,f)
		o<ifmain2> endif
		#10 = [#10 + #2]
	o<GenWhile> endwhile
	o<MoveToSafeHeight> call [#20]
	o<GoTo> call [0] [0] [0] [#20] [#4] 
o<Generate_Path> endsub



(---------------------- Start of main program --------------------------)
( Set flags and data							)
( remember on my setup Z+ is towards tool post 	W- is towards work	)
( if _Use_Z_for_Depth is true						)
(	then safeheight is -ve and depth is +ve				)
(	else safeheight is +ve and depth is -ve				)
(-----------------------------------------------------------------------)
#<_XScale>		= 4	( x scale factor			)
#<_YScale>		= 4	( y scale factor			)
#<_ZScale>		= 1	( z scale factor , I never use		)	
#<_UseRotary>		= 0	(we are not using a rotary machine	)
#<_Use_Z_for_Depth>	= 1	(using w axis for depth			)
#<_Use_Rad_Phase>	= 1	( specifying radius and phase		)
#<_UseProfile>		= 1	(using profile				)
#<_Safeheight>		= 2	(Safe height				)
#<Feedrate>		= 120	(  Feed rate				)
#<nturns>		= 1	( number of spindle turns required	)
#<_ProfileHeightAxis>	= 2	( profile in z direction		)
#<_ProfileBaseAxis>	= 3     ( 0 if X, 1 if Y, 2 if Z, 3 if radial	)

(Create Wheels collection 			)
(param #1 is real component of amplitude 	)
(param #2 is imajinary component of amplitude	)
(param #2 is frequency	of wheel rotation	)

#<_Count> = 0
o<Create_Wheel> call [10] [0] [1] 
o<Create_Wheel> call [5] [0] [7] 
o<Create_Wheel> call [3.33] [90] [-17] 

(now create profile )
#<_PreValue>	= 0
#<_PostValue>	= 0
(param #1 is chord length c 	)
(param #2 is cap height h 	)	
(param #3 is vertical offset	)
(param #4 is x increment	)
o<Cap> call [145] [30] [0] [1] [-30]
(o<Linear> call [0] [0.5] [18] [-15] [32])  
(param #1 is range start )
(param #2 is range inc  	)	
(param #3 is range end	)
(param #4 is start height	)
(param #5 is end height		) 
g21
(******************* Now calculate path ********************************)
o<main1> if [#<_UseRotary> EQ 1]
	g93  (Inverse time mode )
o<main1> endif

o<NTurns> call
#<nturns> = [#<_result>]
g61
G10 L2 P1 X0 Y0 Z0 (ensure that G54 is set to machine zero)	
g90
o<MoveToSafeHeight> call

(param #1 is start angle			)
(param #2 in angle increment			)
(param #3 is end angle				)
(param #4 is feedrate				)
(param #5 is depth of cut			)
(param #6 is phase				)
o<Generate_Path> call [0] [0.1] [#<nturns> * 360 ] [#<Feedrate>] [0] [0]

M2

